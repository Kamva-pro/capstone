# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Application for managing Users, Storage Units, Bookings, Payments, and Customer Support

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Users
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
      KeySchema:
        - AttributeName: userid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  StorageUnitsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StorageUnits
      AttributeDefinitions:
        - AttributeName: unit_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: unit_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bookings
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
        - AttributeName: userid
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserBookingsIndex
          KeySchema:
            - AttributeName: userid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/users.lambda_handler
      Description: Handler for all users-related operations
      CodeUri: ./src
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Tags:
        Stack: !Sub "${AWS::StackName}"

  GetUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/get_units.lambda_handler
      CodeUri: ./src
      Environment:
        Variables:
          STORAGE_UNITS_TABLE: !Ref StorageUnitsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StorageUnitsTable

  PostBookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/post_bookings.lambda_handler
      CodeUri: ./src
      Environment:
        Variables:
          BOOKINGS_TABLE: !Ref BookingsTable
          STORAGE_UNITS_TABLE: !Ref StorageUnitsTable
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - DynamoDBReadPolicy:
            TableName: !Ref StorageUnitsTable

  PutCancelFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: PutCancelFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt BookingsTable.Arn  # Correct ARN format for the DynamoDB table
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  PutCancelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/put_cancel.lambda_handler
      CodeUri: ./src
      Environment:
        Variables:
          BOOKINGS_TABLE: !Ref BookingsTable
      Role: !GetAtt PutCancelFunctionRole.Arn  # Attach the IAM role explicitly
      Policies:
        - AWSLambdaBasicExecutionRole  # Allows Lambda to write logs to CloudWatch

  ListUnitsByStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/list_units_by_status.lambda_handler
      CodeUri: ./src
      Environment:
        Variables:
          STORAGE_UNITS_TABLE: !Ref StorageUnitsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StorageUnitsTable
      Events:
        ListUnitsByStatus:
          Type: Api
          Properties:
            Path: /support/units
            Method: GET

  ChangeUnitStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/change_unit_status.lambda_handler
      Role: !GetAtt ChangeUnitStatusFunctionRole.Arn
      CodeUri: ./src
      Environment:
        Variables:
          STORAGE_UNITS_TABLE: !Ref StorageUnitsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StorageUnitsTable

  ChangeUnitStatusFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: ChangeUnitStatusFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt StorageUnitsTable.Arn

Outputs:
  UsersTable:
    Description: DynamoDB Users table
    Value: !Ref UsersTable

  StorageUnitsTable:
    Description: DynamoDB Storage Units table
    Value: !Ref StorageUnitsTable

  BookingsTable:
    Description: DynamoDB Bookings table
    Value: !Ref BookingsTable

  UsersFunction:
    Description: Lambda function for Users operations
    Value: !Ref UsersFunction

  GetUnitsFunction:
    Description: Lambda function for fetching storage units
    Value: !Ref GetUnitsFunction

  PostBookingsFunction:
    Description: Lambda function for creating bookings
    Value: !Ref PostBookingsFunction

  PutCancelFunction:
    Description: Lambda function for updating bookings
    Value: !Ref PutCancelFunction

  ListUnitsByStatusFunction:
    Description: Lambda function for listing storage units by status
    Value: !Ref ListUnitsByStatusFunction

  ChangeUnitStatusFunction:
    Description: Lambda function for changing storage unit status
    Value: !Ref ChangeUnitStatusFunction
